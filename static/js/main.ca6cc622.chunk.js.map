{"version":3,"sources":["components/FetchRandomUser/FetchRandomUser.js","components/Error/Error.js","App.js","serviceWorker.js","index.js"],"names":["FetchRandomUser","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","people","values","queryString","parse","location","search","numberUsers","size","url","fetch","response","json","data","setState","results","alert","react_default","a","createElement","react_spinners","sizeUnit","color","length","className","map","person","key","login","uuid","alt","name","last","src","picture","large","first","email","phone","Component","Error","charSet","httpEquiv","content","href","rel","type","id","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oYAwEeA,cAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,EACTC,OAAQ,IAJOT,gNASXU,EAASC,IAAYC,MAAMT,KAAKJ,MAAMc,SAASC,QAKnDC,EAHGL,EAAOM,KAGIN,EAAOM,KAFP,IAKZC,EAAM,sCAAwCF,oBAK/BG,MAAMD,iBAAvBE,kBACaA,EAASC,cAAtBC,SACAlB,KAAKmB,SAAS,CACZb,OAAQY,EAAKE,QACbf,SAAS,sDAGXgB,MAAM,wKAKR,OAAIrB,KAAKI,MAAMC,QACNiB,EAAAC,EAAAC,cAACC,EAAA,WAAD,CACLC,SAAU,KACVb,KAAM,IACNc,MAAO,SACPtB,QAASL,KAAKI,MAAMC,UAGnBL,KAAKI,MAAME,OAAOsB,OAKrBN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACZ7B,KAAKI,MAAME,OAAOwB,IAAI,SAAAC,GAAM,OAC3BT,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UAAUG,IAAKD,EAAOE,MAAMC,MACzCZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKJ,EAAOK,KAAKC,KAAMC,IAAKP,EAAOQ,QAAQC,QAChDlB,EAAAC,EAAAC,cAAA,wBAAgBO,EAAOK,KAAKK,MAA5B,OAAuCV,EAAOK,KAAKC,MACnDf,EAAAC,EAAAC,cAAA,qBAAaO,EAAOW,OACpBpB,EAAAC,EAAAC,cAAA,mBAAWO,EAAOY,WAVjBrB,EAAAC,EAAAC,cAAA,yCA5CiBoB,aCgCfC,0LAjCX,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMsB,QAAQ,UACdxB,EAAAC,EAAAC,cAAA,QAAMuB,UAAU,kBAAkBC,QAAQ,YAC1C1B,EAAAC,EAAAC,cAAA,QAAMY,KAAK,WAAWY,QAAQ,wCAE9B1B,EAAAC,EAAAC,cAAA,8CAEAF,EAAAC,EAAAC,cAAA,QAAMyB,KAAK,yDAAyDC,IAAI,eACxE5B,EAAAC,EAAAC,cAAA,QAAMyB,KAAK,gEAAgEC,IAAI,eAE/E5B,EAAAC,EAAAC,cAAA,QAAM2B,KAAK,WAAWD,IAAI,aAAaD,KAAK,kBAO5C3B,EAAAC,EAAAC,cAAA,OAAK4B,GAAG,YACN9B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,2IA1BQoB,cCmBLS,mLAbX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhE,IACjC2B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOG,UAAWd,cAPZD,aCKEgB,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca6cc622.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './FetchRandomUser.css'\nimport { ClipLoader } from 'react-spinners'\nimport queryString from 'query-string'\nimport PropTypes from 'prop-types'\n\nclass FetchRandomUser extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      people: []\n    }\n  }\n\n  async componentDidMount() {\n    const values = queryString.parse(this.props.location.search)\n    let numberUsers\n    if (!values.size) {\n      numberUsers = 100\n    } else {\n      numberUsers = values.size\n    }\n\n    let url = 'https://api.randomuser.me/?results=' + numberUsers\n    let response\n    let data\n\n    try {\n      response = await fetch(url)\n      data = await response.json()\n      this.setState({\n        people: data.results,\n        loading: false,\n      })\n    } catch (error) {\n      alert('Can\\'t connect to Server')\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <ClipLoader\n        sizeUnit={'px'}\n        size={100}\n        color={'silver'}\n        loading={this.state.loading}\n      />\n    }\n    if (!this.state.people.length) {\n      return <div>didn't get a person</div>\n    }\n    // Avatar, fullname, email, phonenumber\n    return (\n      <div className='container'>\n        {this.state.people.map(person => (\n          <div className='content' key={person.login.uuid}>\n            <img alt={person.name.last} src={person.picture.large} />\n            <div>Fullname: {person.name.first}    {person.name.last}</div>\n            <div>Email: {person.email}</div>\n            <div>Tel: {person.phone}</div>\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nFetchRandomUser.propTypes = {\n  location: PropTypes.func.isRequired\n}\n\nexport default FetchRandomUser\n","import React, { Component } from 'react';\nimport './css/style.css';\n\nclass Error extends Component {\n  render() {\n    return (\n      <div>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        {/* The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags */}\n        <title>404 HTML Template by Colorlib</title>\n        {/* Google font */}\n        <link href=\"https://fonts.googleapis.com/css?family=Montserrat:500\" rel=\"stylesheet\" />\n        <link href=\"https://fonts.googleapis.com/css?family=Titillium+Web:700,900\" rel=\"stylesheet\" />\n        {/* Custom stlylesheet */}\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"css/style.css\" />\n        {/* HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries */}\n        {/* WARNING: Respond.js doesn't work if you view the page via file:// */}\n        {/*[if lt IE 9]>\n\t\t  \n\t\t  \n\t\t<![endif]*/}\n        <div id=\"notfound\">\n          <div className=\"notfound\">\n            <div className=\"notfound-404\">\n              <h1>404</h1>\n            </div>\n            <h2>Oops! This Page Could Not Be Found</h2>\n            <p>Sorry but the page you are looking for does not exist, have been removed. name changed or is temporarily unavailable</p>\n          </div>\n        </div>\n        {/* This templates was made by Colorlib (https://colorlib.com) */}\n      </div>\n    );\n  }\n}\n\nexport default Error;","/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react'\nimport './App.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport FetchRandomUser from './components/FetchRandomUser/FetchRandomUser'\nimport Error from './components/Error/Error'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className='App'>\n          <Switch>\n            <Route path='/' exact component={FetchRandomUser} />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}